name: build
on:
 push:
   branches:
   - ""  # 监听所有分支上的 push 事件
 workflow_dispatch:  # 支持手动触发工作流
jobs:
 build:
   runs-on: ubuntu-latest  # 指定工作流运行的操作系统环境为最新的 Ubuntu
   strategy:
     matrix:
       target: [JCG-AC860M]  # 定义固件构建的目标设备
       toolchain: [mipsel-linux-musl]  # 定义使用的工具链
   steps:
     # Step 1: 检出代码仓库的内容
     - uses: actions/checkout@main  # 使用官方的 GitHub Actions 检出代码仓库
     # Step 2: 配置 ccache 以加速编译过程
     - uses: hendrikmuhs/ccache-action@main
       with:
         key: ${{ matrix.target }}-${{ matrix.toolchain }}  # ccache 的缓存键与目标设备和工具链绑定
     # Step 3: 设置 Go 环境
     - uses: actions/setup-go@main
       with:
         go-version: '1.23.0'  # 指定 Go 的版本为 1.23.0
         check-latest: true  # 确保使用最新的 Go 次版本
         cache: false  # 禁用缓存以避免不一致的问题
     # Step 4: 准备构建环境
     - name: Prepare environment  # 设置构建环境的名称
       run: |
         # 更新软件包管理器并安装所需的工具和库
         sudo apt-get update && sudo apt-get install -y libtool-bin gperf python3-docutils autopoint gettext ccache liblzma-dev libltdl-dev
         # 将根目录路径保存到环境变量 ROOTDIR
         echo "ROOTDIR=${{ github.workspace }}/trunk" >> $GITHUB_ENV
         # 将编译时间保存为环境变量 Compilation_time，格式为 YYYYMMDD
         echo "Compilation_time=$(TZ='Asia/Shanghai' date +%Y%m%d)" >> $GITHUB_ENV
         # 优化编译选项以减小固件体积
         echo "CFLAGS=-Os -ffunction-sections -fdata-sections -fno-unwind-tables -fomit-frame-pointer" >> $GITHUB_ENV
         echo "CXXFLAGS=-Os -ffunction-sections -fdata-sections -fno-unwind-tables -fomit-frame-pointer" >> $GITHUB_ENV
         echo "LDFLAGS=" >> $GITHUB_ENV
         # -Os: 优化代码以减小体积
         # -ffunction-sections 和 -fdata-sections: 生成独立的代码和数据段
         # -fomit-frame-pointer: 移除帧指针，进一步减小代码体积
     # Step 5: 设置脚本文件的权限
     - name: Set script permissions  # 设置脚本权限的步骤名称
       run: |
         chmod 755 trunk/user/scripts/files/usr/bin/cloudflare_ddns.sh  # 设置 Cloudflare DDNS 脚本权限
         chmod 755 trunk/user/scripts/files/usr/bin/flytrap.sh  # 设置蜜罐脚本权限
         chmod 755 trunk/user/scripts/files/usr/bin/rps-rfs-ops.sh  # 设置优化操作脚本权限
         chmod 755 trunk/user/scripts/files/usr/bin/traffic.sh  # 设置流量脚本操作脚本权限
         echo "已设置脚本权限为 755"  # 输出确认信息
     # Step 5.5: 压缩web文件
     - name: Minify web files  # 压缩web文件的步骤名称
       run: |
         # 安装必要的压缩工具
         sudo npm install -g uglify-js clean-css-cli html-minifier
         
         # 压缩 JavaScript 文件
         find trunk/user/www -name "*.js" -exec sh -c '
           uglifyjs "$1" -o "${1%.js}.min.js" &&
           mv "${1%.js}.min.js" "$1"
         ' _ {} \;
         
         # 压缩 CSS 文件
         find trunk/user/www -name "*.css" -exec sh -c '
           cleancss -o "${1%.css}.min.css" "$1" &&
           mv "${1%.css}.min.css" "$1"
         ' _ {} \;
         
         # 压缩 ASP 文件(保留服务器代码)
         find trunk/user/www -name "*.asp" -exec sh -c '
           html-minifier --collapse-whitespace --remove-comments \
           --minify-js true --minify-css true \
           --preserve-line-breaks \
           --ignore-custom-fragments "<%.*?%>" \
           "$1" -o "${1%.asp}.min.asp" &&
           mv "${1%.asp}.min.asp" "$1"
         ' _ {} \;
         
         echo "已完成web文件压缩"  # 输出确认信息
     # Step 6: 开始构建固件
     - name: Start build firmware  # 构建固件步骤名称
       run: |
         # 使用指定的工具链和目标设备进行固件编译
         make ${{ matrix.target }} TOOLCHAIN=${{ matrix.toolchain }}
     # Step 7: 上传编译生成的固件文件
     - uses: actions/upload-artifact@main
       with:
         name: ${{ matrix.target }}-${{ matrix.toolchain }}  # 设置上传的文件名
         path: trunk/images/*.trx  # 指定上传的固件文件路径
     # Step 8: 创建或更新版本发布
     - uses: ncipollo/release-action@main
       with:
         commit: ${{ github.sha }}  # 使用当前工作流运行的提交哈希值
         tag: ${{ env.Compilation_time }}  # 使用编译时间作为标签
         artifacts: trunk/images/*.trx  # 上传的固件文件
         allowUpdates: true  # 允许更新已有标签的发布
         omitBodyDuringUpdate: true  # 更新发布时省略正文内容
     # Step 9: 删除旧的工作流运行记录
     - uses: Mattraks/delete-workflow-runs@main
       with:
         retain_days: 0  # 删除所有超过 0 天的运行记录
         keep_minimum_runs: 1  # 至少保留一个运行记录
